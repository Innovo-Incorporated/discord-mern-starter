{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","e","preventDefault","prompt","add","key","fontSize","Avatar","src","photo","signOut","displayName","uid","substring","ChatHeader","type","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","console","log","disabled","value","onChange","target","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5c2e65c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        channelId: null,\r\n        channelName: null\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId\r\n            state.channelName = action.payload.channelName\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from './features/appSlice'\r\nimport './SidebarChannel.css'\r\n\r\nconst SidebarChannel = ({ id, channelName }) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div className='sidebarChannel' onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName\r\n        }))} >\r\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDN6cVhSzhs64pXnTQ8QqulVqrf31AJPG8\",\r\n  authDomain: \"discord-f0486.firebaseapp.com\",\r\n  databaseURL: \"https://discord-f0486.firebaseio.com\",\r\n  projectId: \"discord-f0486\",\r\n  storageBucket: \"discord-f0486.appspot.com\",\r\n  messagingSenderId: \"198422160339\",\r\n  appId: \"1:198422160339:web:729ed4ca74433cef690526\",\r\n  measurementId: \"G-CMG2V852S3\",\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport HeadsetIcon from '@material-ui/icons/Headset'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport db, { auth } from './firebase'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\n\r\nconst Sidebar = () => {\r\n    const user = useSelector(selectUser)\r\n    const [channels, setChannels] = useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => {\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                channel: doc.data()\r\n            })))\r\n        })\r\n    }, [])\r\n\r\n    const handleAddChannel = (e) => {\r\n        e.preventDefault()\r\n\r\n        const channelName = prompt('Enter a new channel name')\r\n\r\n        if (channelName) {\r\n            db.collection('channels').add({\r\n                channelName: channelName\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='sidebar' >\r\n            <div className=\"sidebar__top\">\r\n                <h3>Clever Programmer</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\r\n                </div>\r\n                <div className=\"sidebar__channelsList\">\r\n                    {\r\n                        channels.map(({ id, channel }) => (\r\n                            <SidebarChannel key={id} id={id} channelName={channel.channelName} />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon className='sidebar__voiceIcons' fontSize='large' />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar src={user.photo} onClick={() => auth.signOut()} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport './ChatHeader.css'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport EditLocationRounded from '@material-ui/icons/EditLocationRounded'\r\nimport PeopleAltRounded from '@material-ui/icons/PeopleAltRounded'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\r\n\r\nconst ChatHeader = ({ channelName }) => {\r\n    return (\r\n        <div className='chatHeader' >\r\n            <div className=\"chatHeader__left\">\r\n                <h3><span className=\"chatHeader__hash\">#</span>\r\n                    {channelName}\r\n                    </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRounded />\r\n                <PeopleAltRounded />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input type=\"text\" placeholder='Search' />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nconst Message = ({ timestamp, user, message }) => {\r\n// const Message = ({ message }) => {\r\n\r\n    // console.log(message)\r\n\r\n    return (\r\n        <div className='message' >\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName}\r\n                    <span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toUTCString()}</span>\r\n                </h4>\r\n\r\n                <p>{message}</p> \r\n        </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport Message from './Message'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport { selectChannelId, selectChannelName } from './features/appSlice'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport db from './firebase'\r\nimport firebase from 'firebase'\r\n\r\nconst Chat = () => {\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectChannelId)\r\n    const channelName = useSelector(selectChannelName)\r\n    const [input, setInput] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            })\r\n        }\r\n\r\n\r\n    }, [channelId])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            message: input,\r\n            user: user,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setInput('')\r\n    }\r\n\r\n    return (\r\n        <div className='chat' >\r\n            <ChatHeader channelName={channelName} />\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages.map((message) => {\r\n                    console.log(message)\r\n                })}\r\n                {messages.map(message => (\r\n                    <Message message={message.message} timestamp={message.timestamp} user={message.user} />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize='large' />\r\n                <form>\r\n                    <input type=\"text\" disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\r\n                    <button className='chat__inputButton' onClick={sendMessage} disabled={!channelId} type='submit'>Send Message</button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcon\">\r\n                    <CradGiftcardIcon fontSize='large' />\r\n                    <GifIcon fontSize='large' />\r\n                    <EmojiEmoticonsIcon fontSize='large' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Login.css\";\r\nimport { auth, provider } from \"./firebase\";\r\n\r\nconst Login = () => {\r\n  const signIn = () => {\r\n    // clever google login shizz...\r\n\r\n    auth.signInWithPopup(provider).catch((err) => alert(err.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img\r\n          src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-logo-logodownload-download-logotipos-1.png\"\r\n          alt=\"discord logo\"\r\n        />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Sidebar from \"./Sidebar\";\r\n// import ExpandMore from '@material-ui/icons/ExpandMore' not used\r\nimport Chat from \"./Chat\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { useEffect } from \"react\";\r\nimport { auth } from \"./firebase\";\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      console.log(authUser);\r\n\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  console.log(user);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice'\r\nimport appReducer from '../features/appSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}